{"remainingRequest":"C:\\Users\\RAKESH S\\Desktop\\Bikex-October\\otr\\otr\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\RAKESH S\\Desktop\\Bikex-October\\otr\\otr\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\RAKESH S\\Desktop\\Bikex-October\\otr\\otr\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\RAKESH S\\Desktop\\Bikex-October\\otr\\otr\\src\\components\\upperfooter.vue?vue&type=template&id=14e96c5d&scoped=true&","dependencies":[{"path":"C:\\Users\\RAKESH S\\Desktop\\Bikex-October\\otr\\otr\\src\\components\\upperfooter.vue","mtime":1607620521563},{"path":"C:\\Users\\RAKESH S\\Desktop\\Bikex-October\\otr\\otr\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1606750951265},{"path":"C:\\Users\\RAKESH S\\Desktop\\Bikex-October\\otr\\otr\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1606750966565},{"path":"C:\\Users\\RAKESH S\\Desktop\\Bikex-October\\otr\\otr\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1606750951265},{"path":"C:\\Users\\RAKESH S\\Desktop\\Bikex-October\\otr\\otr\\node_modules\\vue-loader\\lib\\index.js","mtime":1606750966563}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}