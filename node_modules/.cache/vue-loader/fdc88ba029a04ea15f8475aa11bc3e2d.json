{"remainingRequest":"H:\\on-track-II\\new-bike-rakesh-repo\\otr\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!H:\\on-track-II\\new-bike-rakesh-repo\\otr\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!H:\\on-track-II\\new-bike-rakesh-repo\\otr\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!H:\\on-track-II\\new-bike-rakesh-repo\\otr\\src\\components\\home.vue?vue&type=template&id=957c9522&scoped=true&","dependencies":[{"path":"H:\\on-track-II\\new-bike-rakesh-repo\\otr\\src\\components\\home.vue","mtime":1606564943451},{"path":"H:\\on-track-II\\new-bike-rakesh-repo\\otr\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1606555941658},{"path":"H:\\on-track-II\\new-bike-rakesh-repo\\otr\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1606555990913},{"path":"H:\\on-track-II\\new-bike-rakesh-repo\\otr\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1606555941658},{"path":"H:\\on-track-II\\new-bike-rakesh-repo\\otr\\node_modules\\vue-loader\\lib\\index.js","mtime":1606555990911},{"path":"H:\\on-track-II\\new-bike-rakesh-repo\\otr\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1606555941658},{"path":"H:\\on-track-II\\new-bike-rakesh-repo\\otr\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1606555990913},{"path":"H:\\on-track-II\\new-bike-rakesh-repo\\otr\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1606555941658},{"path":"H:\\on-track-II\\new-bike-rakesh-repo\\otr\\node_modules\\vue-loader\\lib\\index.js","mtime":1606555990911}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}